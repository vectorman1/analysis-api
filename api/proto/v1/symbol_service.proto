syntax = "proto3";
package v1.symbol_service;

import "google/api/annotations.proto";
import "protoc-gen-swagger/options/annotations.proto";
import "google/protobuf/timestamp.proto";
import "models.proto";

option go_package = "github.com/vectorman1/analysis-api/generated/symbol_service";

option (grpc.gateway.protoc_gen_swagger.options.openapiv2_swagger) = {
  info: {
    title: "Symbol Service";
    version: "1.0";
    contact: {
      name: "Dystopia Systems";
      url: "https://dystopia.systems";
      email: "admin@dystopia.systems";
    };
  };
  schemes: HTTPS;
  consumes: "application/json";
  produces: "application/json";
  responses: {
    key: "401";
    value: {
      description: "Returned when the request didn't or passed an invalid user token in the request headers.";
      schema: {
        json_schema: {
          type: STRING;
        }
      }
    }
  }
};

message GetPagedRequest {
  v1.PagedFilter filter = 1;
}

message GetPagedResponse {
  repeated v1.Symbol items = 1;
  uint64 totalItems = 2;
}

// can get symbols either by ID or Identifier + ISIN
message ReadRequest {
  uint64 id = 1;
}

message ReadResponse {
  v1.Symbol symbol = 1;
}

message UpdateRequest {
  v1.Symbol symbol = 1;
}

message UpdateResponse {
  enum status {
    FAILED = 0;
    SUCCESS = 1;
  }
}

message DeleteSymbolRequest {
  uint64 id = 1;
}

message DeleteSymbolResponse {
  enum status {
    FAILED = 0;
    SUCCESS = 1;
  }
}

message CreateRequest {
  v1.Symbol symbol = 1;
}

message CreateResponse {
  uint64 id = 1;
}

message PopulateSymbolRequest {
}

message PopulateSymbolResponse {
  enum status {
    FAILED = 0;
    SUCCESS = 1;
  }
}

message StartUpdateJobRequest {
}

message StartUpdateJobResponse {
}

message RecalculateSymbolResponse {
  int64 itemsCreated = 1;
  int64 itemsUpdated = 2;
  int64 itemsDeleted = 3;
  int64 itemsIgnored = 4;
  int64 totalItems = 5;
}

message SymbolOverview {
  string description = 2;
  string country = 3;
  string sector = 4;
  string industry = 5;
  string address = 6;
  int64 fullTimeEmployees = 7;
  string fiscalYearEnd = 8;
  google.protobuf.Timestamp latestQuarter = 9;
  int64 marketCapitalization = 10;
  int64 ebitda = 11;
  float peRatio = 12;
  float pegRatio = 13;
  float bookValue = 14;
  float dividendPerShare = 15;
  float dividendYield = 16;
  float eps = 17;
  float revenuePerShareTtm = 18;
  float profitMargin = 19;
  float operatingMarginTtm = 20;
  float returnOnAssetsTtm = 21;
  float returnOnEquity = 22;
  int64 revenueTtm = 23;
  int64 grossProfitTtm = 24;
  float dilutedEpsTtm = 25;
  float quarterlyEarningsGrowthYoy = 26;
  float quarterlyRevenueGrowthYoy = 27;
  float analystTargetPrice = 28;
  float trailingPe = 29;
  float forwardPe = 30;
  float priceToSalesRatioTtm = 31;
  float priceToBookRatio = 32;
  float evToRevenue = 33;
  float evToEbitda = 34;
  float beta = 35;
  float weekHigh52 = 36;
  float weekLow52 = 37;
  int64 sharesOutstanding = 38;
  int64 sharesFloat = 39;
  int64 sharesShort = 40;
  int64 sharesShortPriorMonth = 41;
  float shortRatio = 42;
  float shortPercentOutstanding = 43;
  float shortPercentFloat = 44;
  float percentInsiders = 45;
  float percentInstitutions = 46;
  float forwardAnnualDividendRate = 47;
  float forwardAnnualDividendYield = 48;
  float payoutRatio = 49;
  google.protobuf.Timestamp dividendDate = 50;
  google.protobuf.Timestamp exDividendDate = 51;
  string lastSplitFactor = 52;
  google.protobuf.Timestamp lastSplitDate = 53;
  google.protobuf.Timestamp updatedAt = 54;
}

message SymbolOverviewRequest {
  string uuid = 1;
}

message SymbolRequest {
  string uuid = 1;
}


service SymbolService {
  rpc GetPaged (GetPagedRequest) returns (GetPagedResponse) {
    option (google.api.http) = {
      post: "/api/v1/symbols/paged",
      body: "*"
    };
  }
  rpc Overview (SymbolOverviewRequest) returns (SymbolOverview) {
    option (google.api.http) = {
      get: "/api/v1/symbols/{uuid}/overview"
    };
  }
  rpc Get (SymbolRequest) returns (v1.Symbol) {
    option (google.api.http) = {
      get: "/api/v1/symbols/{uuid}"
    };
  }
  rpc StartUpdateJob (StartUpdateJobRequest) returns (StartUpdateJobResponse) {
    option (google.api.http) = {
      post: "/api/v1/symbols/update",
    };
  }
}
