syntax = "proto3";
package v1.history_service;

import "google/protobuf/timestamp.proto";
import "google/api/annotations.proto";
import "protoc-gen-swagger/options/annotations.proto";

option go_package = "github.com/vectorman1/analysis-api/generated/history_service";

option (grpc.gateway.protoc_gen_swagger.options.openapiv2_swagger) = {
  info: {
    title: "History Service";
    version: "1.0";
    contact: {
      name: "Dystopia Systems";
      url: "https://dystopia.systems";
      email: "admin@dystopia.systems";
    };
  };
  schemes: HTTPS;
  consumes: "application/json";
  produces: "application/json";
  responses: {
    key: "401";
    value: {
      description: "Returned when the request didn't or passed an invalid user token in the request headers.";
      schema: {
        json_schema: {
          type: STRING;
        }
      }
    }
  }
};

message History {
  float open = 1;
  float close = 2;
  float high = 3;
  float low = 4;
  int64 volume = 5;
  google.protobuf.Timestamp timestamp = 6;
  google.protobuf.Timestamp createdAt = 7;
  float adjClose = 8;
}

message GetBySymbolUuidRequest {
  string symbolUuid = 1;
  google.protobuf.Timestamp startDate = 2;
  google.protobuf.Timestamp endDate = 3;
}

message GetBySymbolUuidResponse {
  repeated History items = 1;
}

message StartUpdateJobRequest {
}

message StartUpdateJobResponse {
}

service HistoryService {
  rpc GetBySymbolUuid(GetBySymbolUuidRequest) returns (GetBySymbolUuidResponse) {
    option (google.api.http) = {
      post: "/api/v1/histories/{symbolUuid}",
      body: "*"
    };
  }
  rpc StartUpdateJob(StartUpdateJobRequest) returns (StartUpdateJobResponse) {
    option (google.api.http) = {
      post: "/api/v1/histories/update",
    };
  }
}