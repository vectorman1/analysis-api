// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package trading212_service

import (
	context "context"
	proto_models "github.com/vectorman1/analysis/analysis-api/generated/proto_models"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// Trading212ServiceClient is the client API for Trading212Service service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type Trading212ServiceClient interface {
	RecalculateSymbols(ctx context.Context, opts ...grpc.CallOption) (Trading212Service_RecalculateSymbolsClient, error)
}

type trading212ServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTrading212ServiceClient(cc grpc.ClientConnInterface) Trading212ServiceClient {
	return &trading212ServiceClient{cc}
}

func (c *trading212ServiceClient) RecalculateSymbols(ctx context.Context, opts ...grpc.CallOption) (Trading212Service_RecalculateSymbolsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Trading212Service_serviceDesc.Streams[0], "/v1.Trading212Service/RecalculateSymbols", opts...)
	if err != nil {
		return nil, err
	}
	x := &trading212ServiceRecalculateSymbolsClient{stream}
	return x, nil
}

type Trading212Service_RecalculateSymbolsClient interface {
	Send(*proto_models.Symbol) error
	Recv() (*RecalculateSymbolsResponse, error)
	grpc.ClientStream
}

type trading212ServiceRecalculateSymbolsClient struct {
	grpc.ClientStream
}

func (x *trading212ServiceRecalculateSymbolsClient) Send(m *proto_models.Symbol) error {
	return x.ClientStream.SendMsg(m)
}

func (x *trading212ServiceRecalculateSymbolsClient) Recv() (*RecalculateSymbolsResponse, error) {
	m := new(RecalculateSymbolsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Trading212ServiceServer is the server API for Trading212Service service.
// All implementations must embed UnimplementedTrading212ServiceServer
// for forward compatibility
type Trading212ServiceServer interface {
	RecalculateSymbols(Trading212Service_RecalculateSymbolsServer) error
	mustEmbedUnimplementedTrading212ServiceServer()
}

// UnimplementedTrading212ServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTrading212ServiceServer struct {
}

func (UnimplementedTrading212ServiceServer) RecalculateSymbols(Trading212Service_RecalculateSymbolsServer) error {
	return status.Errorf(codes.Unimplemented, "method RecalculateSymbols not implemented")
}
func (UnimplementedTrading212ServiceServer) mustEmbedUnimplementedTrading212ServiceServer() {}

// UnsafeTrading212ServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to Trading212ServiceServer will
// result in compilation errors.
type UnsafeTrading212ServiceServer interface {
	mustEmbedUnimplementedTrading212ServiceServer()
}

func RegisterTrading212ServiceServer(s *grpc.Server, srv Trading212ServiceServer) {
	s.RegisterService(&_Trading212Service_serviceDesc, srv)
}

func _Trading212Service_RecalculateSymbols_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(Trading212ServiceServer).RecalculateSymbols(&trading212ServiceRecalculateSymbolsServer{stream})
}

type Trading212Service_RecalculateSymbolsServer interface {
	Send(*RecalculateSymbolsResponse) error
	Recv() (*proto_models.Symbol, error)
	grpc.ServerStream
}

type trading212ServiceRecalculateSymbolsServer struct {
	grpc.ServerStream
}

func (x *trading212ServiceRecalculateSymbolsServer) Send(m *RecalculateSymbolsResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *trading212ServiceRecalculateSymbolsServer) Recv() (*proto_models.Symbol, error) {
	m := new(proto_models.Symbol)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _Trading212Service_serviceDesc = grpc.ServiceDesc{
	ServiceName: "v1.Trading212Service",
	HandlerType: (*Trading212ServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "RecalculateSymbols",
			Handler:       _Trading212Service_RecalculateSymbols_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "trading212_service.proto",
}
