// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package worker_symbol_service

import (
	context "context"
	proto_models "github.com/vectorman1/analysis/analysis-api/generated/proto_models"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// WorkerSymbolServiceClient is the client API for WorkerSymbolService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WorkerSymbolServiceClient interface {
	RecalculateSymbols(ctx context.Context, opts ...grpc.CallOption) (WorkerSymbolService_RecalculateSymbolsClient, error)
}

type workerSymbolServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewWorkerSymbolServiceClient(cc grpc.ClientConnInterface) WorkerSymbolServiceClient {
	return &workerSymbolServiceClient{cc}
}

func (c *workerSymbolServiceClient) RecalculateSymbols(ctx context.Context, opts ...grpc.CallOption) (WorkerSymbolService_RecalculateSymbolsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_WorkerSymbolService_serviceDesc.Streams[0], "/v1.WorkerSymbolService/RecalculateSymbols", opts...)
	if err != nil {
		return nil, err
	}
	x := &workerSymbolServiceRecalculateSymbolsClient{stream}
	return x, nil
}

type WorkerSymbolService_RecalculateSymbolsClient interface {
	Send(*proto_models.Symbol) error
	Recv() (*RecalculateSymbolsResponse, error)
	grpc.ClientStream
}

type workerSymbolServiceRecalculateSymbolsClient struct {
	grpc.ClientStream
}

func (x *workerSymbolServiceRecalculateSymbolsClient) Send(m *proto_models.Symbol) error {
	return x.ClientStream.SendMsg(m)
}

func (x *workerSymbolServiceRecalculateSymbolsClient) Recv() (*RecalculateSymbolsResponse, error) {
	m := new(RecalculateSymbolsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// WorkerSymbolServiceServer is the server API for WorkerSymbolService service.
// All implementations must embed UnimplementedWorkerSymbolServiceServer
// for forward compatibility
type WorkerSymbolServiceServer interface {
	RecalculateSymbols(WorkerSymbolService_RecalculateSymbolsServer) error
	mustEmbedUnimplementedWorkerSymbolServiceServer()
}

// UnimplementedWorkerSymbolServiceServer must be embedded to have forward compatible implementations.
type UnimplementedWorkerSymbolServiceServer struct {
}

func (UnimplementedWorkerSymbolServiceServer) RecalculateSymbols(WorkerSymbolService_RecalculateSymbolsServer) error {
	return status.Errorf(codes.Unimplemented, "method RecalculateSymbols not implemented")
}
func (UnimplementedWorkerSymbolServiceServer) mustEmbedUnimplementedWorkerSymbolServiceServer() {}

// UnsafeWorkerSymbolServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WorkerSymbolServiceServer will
// result in compilation errors.
type UnsafeWorkerSymbolServiceServer interface {
	mustEmbedUnimplementedWorkerSymbolServiceServer()
}

func RegisterWorkerSymbolServiceServer(s *grpc.Server, srv WorkerSymbolServiceServer) {
	s.RegisterService(&_WorkerSymbolService_serviceDesc, srv)
}

func _WorkerSymbolService_RecalculateSymbols_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(WorkerSymbolServiceServer).RecalculateSymbols(&workerSymbolServiceRecalculateSymbolsServer{stream})
}

type WorkerSymbolService_RecalculateSymbolsServer interface {
	Send(*RecalculateSymbolsResponse) error
	Recv() (*proto_models.Symbol, error)
	grpc.ServerStream
}

type workerSymbolServiceRecalculateSymbolsServer struct {
	grpc.ServerStream
}

func (x *workerSymbolServiceRecalculateSymbolsServer) Send(m *RecalculateSymbolsResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *workerSymbolServiceRecalculateSymbolsServer) Recv() (*proto_models.Symbol, error) {
	m := new(proto_models.Symbol)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _WorkerSymbolService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "v1.WorkerSymbolService",
	HandlerType: (*WorkerSymbolServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "RecalculateSymbols",
			Handler:       _WorkerSymbolService_RecalculateSymbols_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "worker_symbol_service.proto",
}
