// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.14.0
// source: instrument_service.proto

package instrument_service

import (
	_ "github.com/grpc-ecosystem/grpc-gateway/protoc-gen-swagger/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type InstrumentStatusResponseType int32

const (
	InstrumentStatus_CREATE InstrumentStatusResponseType = 0
	InstrumentStatus_UPDATE InstrumentStatusResponseType = 1
	InstrumentStatus_DELETE InstrumentStatusResponseType = 2
	InstrumentStatus_IGNORE InstrumentStatusResponseType = 3
)

// Enum value maps for InstrumentStatusResponseType.
var (
	InstrumentStatusResponseType_name = map[int32]string{
		0: "CREATE",
		1: "UPDATE",
		2: "DELETE",
		3: "IGNORE",
	}
	InstrumentStatusResponseType_value = map[string]int32{
		"CREATE": 0,
		"UPDATE": 1,
		"DELETE": 2,
		"IGNORE": 3,
	}
)

func (x InstrumentStatusResponseType) Enum() *InstrumentStatusResponseType {
	p := new(InstrumentStatusResponseType)
	*p = x
	return p
}

func (x InstrumentStatusResponseType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (InstrumentStatusResponseType) Descriptor() protoreflect.EnumDescriptor {
	return file_instrument_service_proto_enumTypes[0].Descriptor()
}

func (InstrumentStatusResponseType) Type() protoreflect.EnumType {
	return &file_instrument_service_proto_enumTypes[0]
}

func (x InstrumentStatusResponseType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use InstrumentStatusResponseType.Descriptor instead.
func (InstrumentStatusResponseType) EnumDescriptor() ([]byte, []int) {
	return file_instrument_service_proto_rawDescGZIP(), []int{18, 0}
}

type Instrument struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uuid                 string                 `protobuf:"bytes,2,opt,name=uuid,proto3" json:"uuid,omitempty"`
	CurrencyCode         string                 `protobuf:"bytes,3,opt,name=currency_code,json=currencyCode,proto3" json:"currency_code,omitempty"`
	Isin                 string                 `protobuf:"bytes,5,opt,name=isin,proto3" json:"isin,omitempty"`
	Identifier           string                 `protobuf:"bytes,6,opt,name=identifier,proto3" json:"identifier,omitempty"`
	Name                 string                 `protobuf:"bytes,7,opt,name=name,proto3" json:"name,omitempty"`
	MinimumOrderQuantity float32                `protobuf:"fixed32,8,opt,name=minimum_order_quantity,json=minimumOrderQuantity,proto3" json:"minimum_order_quantity,omitempty"`
	MarketName           string                 `protobuf:"bytes,9,opt,name=market_name,json=marketName,proto3" json:"market_name,omitempty"`
	MarketHoursGmt       string                 `protobuf:"bytes,10,opt,name=market_hours_gmt,json=marketHoursGmt,proto3" json:"market_hours_gmt,omitempty"`
	CreatedAt            *timestamppb.Timestamp `protobuf:"bytes,11,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt            *timestamppb.Timestamp `protobuf:"bytes,12,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	DeletedAt            *timestamppb.Timestamp `protobuf:"bytes,13,opt,name=deleted_at,json=deletedAt,proto3" json:"deleted_at,omitempty"`
}

func (x *Instrument) Reset() {
	*x = Instrument{}
	if protoimpl.UnsafeEnabled {
		mi := &file_instrument_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Instrument) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Instrument) ProtoMessage() {}

func (x *Instrument) ProtoReflect() protoreflect.Message {
	mi := &file_instrument_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Instrument.ProtoReflect.Descriptor instead.
func (*Instrument) Descriptor() ([]byte, []int) {
	return file_instrument_service_proto_rawDescGZIP(), []int{0}
}

func (x *Instrument) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *Instrument) GetCurrencyCode() string {
	if x != nil {
		return x.CurrencyCode
	}
	return ""
}

func (x *Instrument) GetIsin() string {
	if x != nil {
		return x.Isin
	}
	return ""
}

func (x *Instrument) GetIdentifier() string {
	if x != nil {
		return x.Identifier
	}
	return ""
}

func (x *Instrument) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Instrument) GetMinimumOrderQuantity() float32 {
	if x != nil {
		return x.MinimumOrderQuantity
	}
	return 0
}

func (x *Instrument) GetMarketName() string {
	if x != nil {
		return x.MarketName
	}
	return ""
}

func (x *Instrument) GetMarketHoursGmt() string {
	if x != nil {
		return x.MarketHoursGmt
	}
	return ""
}

func (x *Instrument) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *Instrument) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *Instrument) GetDeletedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.DeletedAt
	}
	return nil
}

type Instruments struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Symbols []*Instrument `protobuf:"bytes,1,rep,name=symbols,proto3" json:"symbols,omitempty"`
}

func (x *Instruments) Reset() {
	*x = Instruments{}
	if protoimpl.UnsafeEnabled {
		mi := &file_instrument_service_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Instruments) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Instruments) ProtoMessage() {}

func (x *Instruments) ProtoReflect() protoreflect.Message {
	mi := &file_instrument_service_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Instruments.ProtoReflect.Descriptor instead.
func (*Instruments) Descriptor() ([]byte, []int) {
	return file_instrument_service_proto_rawDescGZIP(), []int{1}
}

func (x *Instruments) GetSymbols() []*Instrument {
	if x != nil {
		return x.Symbols
	}
	return nil
}

type PagedFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PageSize   uint64 `protobuf:"varint,1,opt,name=pageSize,proto3" json:"pageSize,omitempty"`
	PageNumber uint64 `protobuf:"varint,2,opt,name=pageNumber,proto3" json:"pageNumber,omitempty"`
	Order      string `protobuf:"bytes,3,opt,name=order,proto3" json:"order,omitempty"`
	Ascending  bool   `protobuf:"varint,4,opt,name=ascending,proto3" json:"ascending,omitempty"`
	Text       string `protobuf:"bytes,5,opt,name=text,proto3" json:"text,omitempty"`
}

func (x *PagedFilter) Reset() {
	*x = PagedFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_instrument_service_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PagedFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PagedFilter) ProtoMessage() {}

func (x *PagedFilter) ProtoReflect() protoreflect.Message {
	mi := &file_instrument_service_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PagedFilter.ProtoReflect.Descriptor instead.
func (*PagedFilter) Descriptor() ([]byte, []int) {
	return file_instrument_service_proto_rawDescGZIP(), []int{2}
}

func (x *PagedFilter) GetPageSize() uint64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *PagedFilter) GetPageNumber() uint64 {
	if x != nil {
		return x.PageNumber
	}
	return 0
}

func (x *PagedFilter) GetOrder() string {
	if x != nil {
		return x.Order
	}
	return ""
}

func (x *PagedFilter) GetAscending() bool {
	if x != nil {
		return x.Ascending
	}
	return false
}

func (x *PagedFilter) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

type PagedRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Filter *PagedFilter `protobuf:"bytes,1,opt,name=filter,proto3" json:"filter,omitempty"`
}

func (x *PagedRequest) Reset() {
	*x = PagedRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_instrument_service_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PagedRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PagedRequest) ProtoMessage() {}

func (x *PagedRequest) ProtoReflect() protoreflect.Message {
	mi := &file_instrument_service_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PagedRequest.ProtoReflect.Descriptor instead.
func (*PagedRequest) Descriptor() ([]byte, []int) {
	return file_instrument_service_proto_rawDescGZIP(), []int{3}
}

func (x *PagedRequest) GetFilter() *PagedFilter {
	if x != nil {
		return x.Filter
	}
	return nil
}

type PagedResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Items      []*Instrument `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
	TotalItems uint64        `protobuf:"varint,2,opt,name=totalItems,proto3" json:"totalItems,omitempty"`
}

func (x *PagedResponse) Reset() {
	*x = PagedResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_instrument_service_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PagedResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PagedResponse) ProtoMessage() {}

func (x *PagedResponse) ProtoReflect() protoreflect.Message {
	mi := &file_instrument_service_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PagedResponse.ProtoReflect.Descriptor instead.
func (*PagedResponse) Descriptor() ([]byte, []int) {
	return file_instrument_service_proto_rawDescGZIP(), []int{4}
}

func (x *PagedResponse) GetItems() []*Instrument {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *PagedResponse) GetTotalItems() uint64 {
	if x != nil {
		return x.TotalItems
	}
	return 0
}

type StartUpdateJobRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *StartUpdateJobRequest) Reset() {
	*x = StartUpdateJobRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_instrument_service_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StartUpdateJobRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartUpdateJobRequest) ProtoMessage() {}

func (x *StartUpdateJobRequest) ProtoReflect() protoreflect.Message {
	mi := &file_instrument_service_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartUpdateJobRequest.ProtoReflect.Descriptor instead.
func (*StartUpdateJobRequest) Descriptor() ([]byte, []int) {
	return file_instrument_service_proto_rawDescGZIP(), []int{5}
}

type StartUpdateJobResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *StartUpdateJobResponse) Reset() {
	*x = StartUpdateJobResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_instrument_service_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StartUpdateJobResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartUpdateJobResponse) ProtoMessage() {}

func (x *StartUpdateJobResponse) ProtoReflect() protoreflect.Message {
	mi := &file_instrument_service_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartUpdateJobResponse.ProtoReflect.Descriptor instead.
func (*StartUpdateJobResponse) Descriptor() ([]byte, []int) {
	return file_instrument_service_proto_rawDescGZIP(), []int{6}
}

type UpdateAllResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ItemsCreated int64 `protobuf:"varint,1,opt,name=itemsCreated,proto3" json:"itemsCreated,omitempty"`
	ItemsUpdated int64 `protobuf:"varint,2,opt,name=itemsUpdated,proto3" json:"itemsUpdated,omitempty"`
	ItemsDeleted int64 `protobuf:"varint,3,opt,name=itemsDeleted,proto3" json:"itemsDeleted,omitempty"`
	ItemsIgnored int64 `protobuf:"varint,4,opt,name=itemsIgnored,proto3" json:"itemsIgnored,omitempty"`
	TotalItems   int64 `protobuf:"varint,5,opt,name=totalItems,proto3" json:"totalItems,omitempty"`
}

func (x *UpdateAllResponse) Reset() {
	*x = UpdateAllResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_instrument_service_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateAllResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateAllResponse) ProtoMessage() {}

func (x *UpdateAllResponse) ProtoReflect() protoreflect.Message {
	mi := &file_instrument_service_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateAllResponse.ProtoReflect.Descriptor instead.
func (*UpdateAllResponse) Descriptor() ([]byte, []int) {
	return file_instrument_service_proto_rawDescGZIP(), []int{7}
}

func (x *UpdateAllResponse) GetItemsCreated() int64 {
	if x != nil {
		return x.ItemsCreated
	}
	return 0
}

func (x *UpdateAllResponse) GetItemsUpdated() int64 {
	if x != nil {
		return x.ItemsUpdated
	}
	return 0
}

func (x *UpdateAllResponse) GetItemsDeleted() int64 {
	if x != nil {
		return x.ItemsDeleted
	}
	return 0
}

func (x *UpdateAllResponse) GetItemsIgnored() int64 {
	if x != nil {
		return x.ItemsIgnored
	}
	return 0
}

func (x *UpdateAllResponse) GetTotalItems() int64 {
	if x != nil {
		return x.TotalItems
	}
	return 0
}

type InstrumentOverview struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Description                string                 `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	Country                    string                 `protobuf:"bytes,3,opt,name=country,proto3" json:"country,omitempty"`
	Sector                     string                 `protobuf:"bytes,4,opt,name=sector,proto3" json:"sector,omitempty"`
	Industry                   string                 `protobuf:"bytes,5,opt,name=industry,proto3" json:"industry,omitempty"`
	Address                    string                 `protobuf:"bytes,6,opt,name=address,proto3" json:"address,omitempty"`
	FullTimeEmployees          int64                  `protobuf:"varint,7,opt,name=fullTimeEmployees,proto3" json:"fullTimeEmployees,omitempty"`
	FiscalYearEnd              string                 `protobuf:"bytes,8,opt,name=fiscalYearEnd,proto3" json:"fiscalYearEnd,omitempty"`
	LatestQuarter              *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=latestQuarter,proto3" json:"latestQuarter,omitempty"`
	MarketCapitalization       int64                  `protobuf:"varint,10,opt,name=marketCapitalization,proto3" json:"marketCapitalization,omitempty"`
	Ebitda                     int64                  `protobuf:"varint,11,opt,name=ebitda,proto3" json:"ebitda,omitempty"`
	PeRatio                    float32                `protobuf:"fixed32,12,opt,name=peRatio,proto3" json:"peRatio,omitempty"`
	PegRatio                   float32                `protobuf:"fixed32,13,opt,name=pegRatio,proto3" json:"pegRatio,omitempty"`
	BookValue                  float32                `protobuf:"fixed32,14,opt,name=bookValue,proto3" json:"bookValue,omitempty"`
	DividendPerShare           float32                `protobuf:"fixed32,15,opt,name=dividendPerShare,proto3" json:"dividendPerShare,omitempty"`
	DividendYield              float32                `protobuf:"fixed32,16,opt,name=dividendYield,proto3" json:"dividendYield,omitempty"`
	Eps                        float32                `protobuf:"fixed32,17,opt,name=eps,proto3" json:"eps,omitempty"`
	RevenuePerShareTtm         float32                `protobuf:"fixed32,18,opt,name=revenuePerShareTtm,proto3" json:"revenuePerShareTtm,omitempty"`
	ProfitMargin               float32                `protobuf:"fixed32,19,opt,name=profitMargin,proto3" json:"profitMargin,omitempty"`
	OperatingMarginTtm         float32                `protobuf:"fixed32,20,opt,name=operatingMarginTtm,proto3" json:"operatingMarginTtm,omitempty"`
	ReturnOnAssetsTtm          float32                `protobuf:"fixed32,21,opt,name=returnOnAssetsTtm,proto3" json:"returnOnAssetsTtm,omitempty"`
	ReturnOnEquity             float32                `protobuf:"fixed32,22,opt,name=returnOnEquity,proto3" json:"returnOnEquity,omitempty"`
	RevenueTtm                 int64                  `protobuf:"varint,23,opt,name=revenueTtm,proto3" json:"revenueTtm,omitempty"`
	GrossProfitTtm             int64                  `protobuf:"varint,24,opt,name=grossProfitTtm,proto3" json:"grossProfitTtm,omitempty"`
	DilutedEpsTtm              float32                `protobuf:"fixed32,25,opt,name=dilutedEpsTtm,proto3" json:"dilutedEpsTtm,omitempty"`
	QuarterlyEarningsGrowthYoy float32                `protobuf:"fixed32,26,opt,name=quarterlyEarningsGrowthYoy,proto3" json:"quarterlyEarningsGrowthYoy,omitempty"`
	QuarterlyRevenueGrowthYoy  float32                `protobuf:"fixed32,27,opt,name=quarterlyRevenueGrowthYoy,proto3" json:"quarterlyRevenueGrowthYoy,omitempty"`
	AnalystTargetPrice         float32                `protobuf:"fixed32,28,opt,name=analystTargetPrice,proto3" json:"analystTargetPrice,omitempty"`
	TrailingPe                 float32                `protobuf:"fixed32,29,opt,name=trailingPe,proto3" json:"trailingPe,omitempty"`
	ForwardPe                  float32                `protobuf:"fixed32,30,opt,name=forwardPe,proto3" json:"forwardPe,omitempty"`
	PriceToSalesRatioTtm       float32                `protobuf:"fixed32,31,opt,name=priceToSalesRatioTtm,proto3" json:"priceToSalesRatioTtm,omitempty"`
	PriceToBookRatio           float32                `protobuf:"fixed32,32,opt,name=priceToBookRatio,proto3" json:"priceToBookRatio,omitempty"`
	EvToRevenue                float32                `protobuf:"fixed32,33,opt,name=evToRevenue,proto3" json:"evToRevenue,omitempty"`
	EvToEbitda                 float32                `protobuf:"fixed32,34,opt,name=evToEbitda,proto3" json:"evToEbitda,omitempty"`
	Beta                       float32                `protobuf:"fixed32,35,opt,name=beta,proto3" json:"beta,omitempty"`
	WeekHigh52                 float32                `protobuf:"fixed32,36,opt,name=weekHigh52,proto3" json:"weekHigh52,omitempty"`
	WeekLow52                  float32                `protobuf:"fixed32,37,opt,name=weekLow52,proto3" json:"weekLow52,omitempty"`
	SharesOutstanding          int64                  `protobuf:"varint,38,opt,name=sharesOutstanding,proto3" json:"sharesOutstanding,omitempty"`
	SharesFloat                int64                  `protobuf:"varint,39,opt,name=sharesFloat,proto3" json:"sharesFloat,omitempty"`
	SharesShort                int64                  `protobuf:"varint,40,opt,name=sharesShort,proto3" json:"sharesShort,omitempty"`
	SharesShortPriorMonth      int64                  `protobuf:"varint,41,opt,name=sharesShortPriorMonth,proto3" json:"sharesShortPriorMonth,omitempty"`
	ShortRatio                 float32                `protobuf:"fixed32,42,opt,name=shortRatio,proto3" json:"shortRatio,omitempty"`
	ShortPercentOutstanding    float32                `protobuf:"fixed32,43,opt,name=shortPercentOutstanding,proto3" json:"shortPercentOutstanding,omitempty"`
	ShortPercentFloat          float32                `protobuf:"fixed32,44,opt,name=shortPercentFloat,proto3" json:"shortPercentFloat,omitempty"`
	PercentInsiders            float32                `protobuf:"fixed32,45,opt,name=percentInsiders,proto3" json:"percentInsiders,omitempty"`
	PercentInstitutions        float32                `protobuf:"fixed32,46,opt,name=percentInstitutions,proto3" json:"percentInstitutions,omitempty"`
	ForwardAnnualDividendRate  float32                `protobuf:"fixed32,47,opt,name=forwardAnnualDividendRate,proto3" json:"forwardAnnualDividendRate,omitempty"`
	ForwardAnnualDividendYield float32                `protobuf:"fixed32,48,opt,name=forwardAnnualDividendYield,proto3" json:"forwardAnnualDividendYield,omitempty"`
	PayoutRatio                float32                `protobuf:"fixed32,49,opt,name=payoutRatio,proto3" json:"payoutRatio,omitempty"`
	DividendDate               *timestamppb.Timestamp `protobuf:"bytes,50,opt,name=dividendDate,proto3" json:"dividendDate,omitempty"`
	ExDividendDate             *timestamppb.Timestamp `protobuf:"bytes,51,opt,name=exDividendDate,proto3" json:"exDividendDate,omitempty"`
	LastSplitFactor            string                 `protobuf:"bytes,52,opt,name=lastSplitFactor,proto3" json:"lastSplitFactor,omitempty"`
	LastSplitDate              *timestamppb.Timestamp `protobuf:"bytes,53,opt,name=lastSplitDate,proto3" json:"lastSplitDate,omitempty"`
	UpdatedAt                  *timestamppb.Timestamp `protobuf:"bytes,54,opt,name=updatedAt,proto3" json:"updatedAt,omitempty"`
}

func (x *InstrumentOverview) Reset() {
	*x = InstrumentOverview{}
	if protoimpl.UnsafeEnabled {
		mi := &file_instrument_service_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InstrumentOverview) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstrumentOverview) ProtoMessage() {}

func (x *InstrumentOverview) ProtoReflect() protoreflect.Message {
	mi := &file_instrument_service_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstrumentOverview.ProtoReflect.Descriptor instead.
func (*InstrumentOverview) Descriptor() ([]byte, []int) {
	return file_instrument_service_proto_rawDescGZIP(), []int{8}
}

func (x *InstrumentOverview) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *InstrumentOverview) GetCountry() string {
	if x != nil {
		return x.Country
	}
	return ""
}

func (x *InstrumentOverview) GetSector() string {
	if x != nil {
		return x.Sector
	}
	return ""
}

func (x *InstrumentOverview) GetIndustry() string {
	if x != nil {
		return x.Industry
	}
	return ""
}

func (x *InstrumentOverview) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *InstrumentOverview) GetFullTimeEmployees() int64 {
	if x != nil {
		return x.FullTimeEmployees
	}
	return 0
}

func (x *InstrumentOverview) GetFiscalYearEnd() string {
	if x != nil {
		return x.FiscalYearEnd
	}
	return ""
}

func (x *InstrumentOverview) GetLatestQuarter() *timestamppb.Timestamp {
	if x != nil {
		return x.LatestQuarter
	}
	return nil
}

func (x *InstrumentOverview) GetMarketCapitalization() int64 {
	if x != nil {
		return x.MarketCapitalization
	}
	return 0
}

func (x *InstrumentOverview) GetEbitda() int64 {
	if x != nil {
		return x.Ebitda
	}
	return 0
}

func (x *InstrumentOverview) GetPeRatio() float32 {
	if x != nil {
		return x.PeRatio
	}
	return 0
}

func (x *InstrumentOverview) GetPegRatio() float32 {
	if x != nil {
		return x.PegRatio
	}
	return 0
}

func (x *InstrumentOverview) GetBookValue() float32 {
	if x != nil {
		return x.BookValue
	}
	return 0
}

func (x *InstrumentOverview) GetDividendPerShare() float32 {
	if x != nil {
		return x.DividendPerShare
	}
	return 0
}

func (x *InstrumentOverview) GetDividendYield() float32 {
	if x != nil {
		return x.DividendYield
	}
	return 0
}

func (x *InstrumentOverview) GetEps() float32 {
	if x != nil {
		return x.Eps
	}
	return 0
}

func (x *InstrumentOverview) GetRevenuePerShareTtm() float32 {
	if x != nil {
		return x.RevenuePerShareTtm
	}
	return 0
}

func (x *InstrumentOverview) GetProfitMargin() float32 {
	if x != nil {
		return x.ProfitMargin
	}
	return 0
}

func (x *InstrumentOverview) GetOperatingMarginTtm() float32 {
	if x != nil {
		return x.OperatingMarginTtm
	}
	return 0
}

func (x *InstrumentOverview) GetReturnOnAssetsTtm() float32 {
	if x != nil {
		return x.ReturnOnAssetsTtm
	}
	return 0
}

func (x *InstrumentOverview) GetReturnOnEquity() float32 {
	if x != nil {
		return x.ReturnOnEquity
	}
	return 0
}

func (x *InstrumentOverview) GetRevenueTtm() int64 {
	if x != nil {
		return x.RevenueTtm
	}
	return 0
}

func (x *InstrumentOverview) GetGrossProfitTtm() int64 {
	if x != nil {
		return x.GrossProfitTtm
	}
	return 0
}

func (x *InstrumentOverview) GetDilutedEpsTtm() float32 {
	if x != nil {
		return x.DilutedEpsTtm
	}
	return 0
}

func (x *InstrumentOverview) GetQuarterlyEarningsGrowthYoy() float32 {
	if x != nil {
		return x.QuarterlyEarningsGrowthYoy
	}
	return 0
}

func (x *InstrumentOverview) GetQuarterlyRevenueGrowthYoy() float32 {
	if x != nil {
		return x.QuarterlyRevenueGrowthYoy
	}
	return 0
}

func (x *InstrumentOverview) GetAnalystTargetPrice() float32 {
	if x != nil {
		return x.AnalystTargetPrice
	}
	return 0
}

func (x *InstrumentOverview) GetTrailingPe() float32 {
	if x != nil {
		return x.TrailingPe
	}
	return 0
}

func (x *InstrumentOverview) GetForwardPe() float32 {
	if x != nil {
		return x.ForwardPe
	}
	return 0
}

func (x *InstrumentOverview) GetPriceToSalesRatioTtm() float32 {
	if x != nil {
		return x.PriceToSalesRatioTtm
	}
	return 0
}

func (x *InstrumentOverview) GetPriceToBookRatio() float32 {
	if x != nil {
		return x.PriceToBookRatio
	}
	return 0
}

func (x *InstrumentOverview) GetEvToRevenue() float32 {
	if x != nil {
		return x.EvToRevenue
	}
	return 0
}

func (x *InstrumentOverview) GetEvToEbitda() float32 {
	if x != nil {
		return x.EvToEbitda
	}
	return 0
}

func (x *InstrumentOverview) GetBeta() float32 {
	if x != nil {
		return x.Beta
	}
	return 0
}

func (x *InstrumentOverview) GetWeekHigh52() float32 {
	if x != nil {
		return x.WeekHigh52
	}
	return 0
}

func (x *InstrumentOverview) GetWeekLow52() float32 {
	if x != nil {
		return x.WeekLow52
	}
	return 0
}

func (x *InstrumentOverview) GetSharesOutstanding() int64 {
	if x != nil {
		return x.SharesOutstanding
	}
	return 0
}

func (x *InstrumentOverview) GetSharesFloat() int64 {
	if x != nil {
		return x.SharesFloat
	}
	return 0
}

func (x *InstrumentOverview) GetSharesShort() int64 {
	if x != nil {
		return x.SharesShort
	}
	return 0
}

func (x *InstrumentOverview) GetSharesShortPriorMonth() int64 {
	if x != nil {
		return x.SharesShortPriorMonth
	}
	return 0
}

func (x *InstrumentOverview) GetShortRatio() float32 {
	if x != nil {
		return x.ShortRatio
	}
	return 0
}

func (x *InstrumentOverview) GetShortPercentOutstanding() float32 {
	if x != nil {
		return x.ShortPercentOutstanding
	}
	return 0
}

func (x *InstrumentOverview) GetShortPercentFloat() float32 {
	if x != nil {
		return x.ShortPercentFloat
	}
	return 0
}

func (x *InstrumentOverview) GetPercentInsiders() float32 {
	if x != nil {
		return x.PercentInsiders
	}
	return 0
}

func (x *InstrumentOverview) GetPercentInstitutions() float32 {
	if x != nil {
		return x.PercentInstitutions
	}
	return 0
}

func (x *InstrumentOverview) GetForwardAnnualDividendRate() float32 {
	if x != nil {
		return x.ForwardAnnualDividendRate
	}
	return 0
}

func (x *InstrumentOverview) GetForwardAnnualDividendYield() float32 {
	if x != nil {
		return x.ForwardAnnualDividendYield
	}
	return 0
}

func (x *InstrumentOverview) GetPayoutRatio() float32 {
	if x != nil {
		return x.PayoutRatio
	}
	return 0
}

func (x *InstrumentOverview) GetDividendDate() *timestamppb.Timestamp {
	if x != nil {
		return x.DividendDate
	}
	return nil
}

func (x *InstrumentOverview) GetExDividendDate() *timestamppb.Timestamp {
	if x != nil {
		return x.ExDividendDate
	}
	return nil
}

func (x *InstrumentOverview) GetLastSplitFactor() string {
	if x != nil {
		return x.LastSplitFactor
	}
	return ""
}

func (x *InstrumentOverview) GetLastSplitDate() *timestamppb.Timestamp {
	if x != nil {
		return x.LastSplitDate
	}
	return nil
}

func (x *InstrumentOverview) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

type InstrumentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uuid string `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
}

func (x *InstrumentRequest) Reset() {
	*x = InstrumentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_instrument_service_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InstrumentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstrumentRequest) ProtoMessage() {}

func (x *InstrumentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_instrument_service_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstrumentRequest.ProtoReflect.Descriptor instead.
func (*InstrumentRequest) Descriptor() ([]byte, []int) {
	return file_instrument_service_proto_rawDescGZIP(), []int{9}
}

func (x *InstrumentRequest) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

type HistoryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uuid      string                 `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	StartDate *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=startDate,proto3" json:"startDate,omitempty"`
	EndDate   *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=endDate,proto3" json:"endDate,omitempty"`
}

func (x *HistoryRequest) Reset() {
	*x = HistoryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_instrument_service_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HistoryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HistoryRequest) ProtoMessage() {}

func (x *HistoryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_instrument_service_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HistoryRequest.ProtoReflect.Descriptor instead.
func (*HistoryRequest) Descriptor() ([]byte, []int) {
	return file_instrument_service_proto_rawDescGZIP(), []int{10}
}

func (x *HistoryRequest) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *HistoryRequest) GetStartDate() *timestamppb.Timestamp {
	if x != nil {
		return x.StartDate
	}
	return nil
}

func (x *HistoryRequest) GetEndDate() *timestamppb.Timestamp {
	if x != nil {
		return x.EndDate
	}
	return nil
}

type HistoryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Items []*History `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *HistoryResponse) Reset() {
	*x = HistoryResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_instrument_service_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HistoryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HistoryResponse) ProtoMessage() {}

func (x *HistoryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_instrument_service_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HistoryResponse.ProtoReflect.Descriptor instead.
func (*HistoryResponse) Descriptor() ([]byte, []int) {
	return file_instrument_service_proto_rawDescGZIP(), []int{11}
}

func (x *HistoryResponse) GetItems() []*History {
	if x != nil {
		return x.Items
	}
	return nil
}

type ChartRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uuid      string                 `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	StartDate *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=startDate,proto3" json:"startDate,omitempty"`
	EndDate   *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=endDate,proto3" json:"endDate,omitempty"`
}

func (x *ChartRequest) Reset() {
	*x = ChartRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_instrument_service_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChartRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChartRequest) ProtoMessage() {}

func (x *ChartRequest) ProtoReflect() protoreflect.Message {
	mi := &file_instrument_service_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChartRequest.ProtoReflect.Descriptor instead.
func (*ChartRequest) Descriptor() ([]byte, []int) {
	return file_instrument_service_proto_rawDescGZIP(), []int{12}
}

func (x *ChartRequest) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *ChartRequest) GetStartDate() *timestamppb.Timestamp {
	if x != nil {
		return x.StartDate
	}
	return nil
}

func (x *ChartRequest) GetEndDate() *timestamppb.Timestamp {
	if x != nil {
		return x.EndDate
	}
	return nil
}

type ChartResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Dates     []string    `protobuf:"bytes,1,rep,name=dates,proto3" json:"dates,omitempty"`
	ChartDays []*ChartDay `protobuf:"bytes,2,rep,name=chartDays,proto3" json:"chartDays,omitempty"`
}

func (x *ChartResponse) Reset() {
	*x = ChartResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_instrument_service_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChartResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChartResponse) ProtoMessage() {}

func (x *ChartResponse) ProtoReflect() protoreflect.Message {
	mi := &file_instrument_service_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChartResponse.ProtoReflect.Descriptor instead.
func (*ChartResponse) Descriptor() ([]byte, []int) {
	return file_instrument_service_proto_rawDescGZIP(), []int{13}
}

func (x *ChartResponse) GetDates() []string {
	if x != nil {
		return x.Dates
	}
	return nil
}

func (x *ChartResponse) GetChartDays() []*ChartDay {
	if x != nil {
		return x.ChartDays
	}
	return nil
}

type ChartDay struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Values []float64 `protobuf:"fixed64,1,rep,packed,name=values,proto3" json:"values,omitempty"`
}

func (x *ChartDay) Reset() {
	*x = ChartDay{}
	if protoimpl.UnsafeEnabled {
		mi := &file_instrument_service_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChartDay) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChartDay) ProtoMessage() {}

func (x *ChartDay) ProtoReflect() protoreflect.Message {
	mi := &file_instrument_service_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChartDay.ProtoReflect.Descriptor instead.
func (*ChartDay) Descriptor() ([]byte, []int) {
	return file_instrument_service_proto_rawDescGZIP(), []int{14}
}

func (x *ChartDay) GetValues() []float64 {
	if x != nil {
		return x.Values
	}
	return nil
}

type HistoryUpdateJobRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *HistoryUpdateJobRequest) Reset() {
	*x = HistoryUpdateJobRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_instrument_service_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HistoryUpdateJobRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HistoryUpdateJobRequest) ProtoMessage() {}

func (x *HistoryUpdateJobRequest) ProtoReflect() protoreflect.Message {
	mi := &file_instrument_service_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HistoryUpdateJobRequest.ProtoReflect.Descriptor instead.
func (*HistoryUpdateJobRequest) Descriptor() ([]byte, []int) {
	return file_instrument_service_proto_rawDescGZIP(), []int{15}
}

type HistoryUpdateJobResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *HistoryUpdateJobResponse) Reset() {
	*x = HistoryUpdateJobResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_instrument_service_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HistoryUpdateJobResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HistoryUpdateJobResponse) ProtoMessage() {}

func (x *HistoryUpdateJobResponse) ProtoReflect() protoreflect.Message {
	mi := &file_instrument_service_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HistoryUpdateJobResponse.ProtoReflect.Descriptor instead.
func (*HistoryUpdateJobResponse) Descriptor() ([]byte, []int) {
	return file_instrument_service_proto_rawDescGZIP(), []int{16}
}

type History struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Open      float64                `protobuf:"fixed64,1,opt,name=open,proto3" json:"open,omitempty"`
	Close     float64                `protobuf:"fixed64,2,opt,name=close,proto3" json:"close,omitempty"`
	High      float64                `protobuf:"fixed64,3,opt,name=high,proto3" json:"high,omitempty"`
	Low       float64                `protobuf:"fixed64,4,opt,name=low,proto3" json:"low,omitempty"`
	Volume    int64                  `protobuf:"varint,5,opt,name=volume,proto3" json:"volume,omitempty"`
	Timestamp *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	AdjClose  float64                `protobuf:"fixed64,8,opt,name=adjClose,proto3" json:"adjClose,omitempty"`
}

func (x *History) Reset() {
	*x = History{}
	if protoimpl.UnsafeEnabled {
		mi := &file_instrument_service_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *History) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*History) ProtoMessage() {}

func (x *History) ProtoReflect() protoreflect.Message {
	mi := &file_instrument_service_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use History.ProtoReflect.Descriptor instead.
func (*History) Descriptor() ([]byte, []int) {
	return file_instrument_service_proto_rawDescGZIP(), []int{17}
}

func (x *History) GetOpen() float64 {
	if x != nil {
		return x.Open
	}
	return 0
}

func (x *History) GetClose() float64 {
	if x != nil {
		return x.Close
	}
	return 0
}

func (x *History) GetHigh() float64 {
	if x != nil {
		return x.High
	}
	return 0
}

func (x *History) GetLow() float64 {
	if x != nil {
		return x.Low
	}
	return 0
}

func (x *History) GetVolume() int64 {
	if x != nil {
		return x.Volume
	}
	return 0
}

func (x *History) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *History) GetAdjClose() float64 {
	if x != nil {
		return x.AdjClose
	}
	return 0
}

type InstrumentStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type   InstrumentStatusResponseType `protobuf:"varint,1,opt,name=type,proto3,enum=v1.instrument_service.InstrumentStatusResponseType" json:"type,omitempty"`
	Symbol *Instrument                  `protobuf:"bytes,2,opt,name=symbol,proto3" json:"symbol,omitempty"`
}

func (x *InstrumentStatus) Reset() {
	*x = InstrumentStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_instrument_service_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InstrumentStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstrumentStatus) ProtoMessage() {}

func (x *InstrumentStatus) ProtoReflect() protoreflect.Message {
	mi := &file_instrument_service_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstrumentStatus.ProtoReflect.Descriptor instead.
func (*InstrumentStatus) Descriptor() ([]byte, []int) {
	return file_instrument_service_proto_rawDescGZIP(), []int{18}
}

func (x *InstrumentStatus) GetType() InstrumentStatusResponseType {
	if x != nil {
		return x.Type
	}
	return InstrumentStatus_CREATE
}

func (x *InstrumentStatus) GetSymbol() *Instrument {
	if x != nil {
		return x.Symbol
	}
	return nil
}

var File_instrument_service_proto protoreflect.FileDescriptor

var file_instrument_service_proto_rawDesc = []byte{
	0x0a, 0x18, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x15, 0x76, 0x31, 0x2e, 0x69,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e,
	0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x2c, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d, 0x73, 0x77, 0x61, 0x67,
	0x67, 0x65, 0x72, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x6e, 0x6e, 0x6f,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xbf,
	0x03, 0x0a, 0x0a, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x12, 0x0a,
	0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x75, 0x69,
	0x64, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x73, 0x69, 0x6e, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x69, 0x73, 0x69, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x34,
	0x0a, 0x16, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f,
	0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x02, 0x52, 0x14,
	0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x51, 0x75, 0x61, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x61, 0x72, 0x6b, 0x65,
	0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f,
	0x68, 0x6f, 0x75, 0x72, 0x73, 0x5f, 0x67, 0x6d, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x48, 0x6f, 0x75, 0x72, 0x73, 0x47, 0x6d, 0x74, 0x12,
	0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64,
	0x5f, 0x61, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x22, 0x4a, 0x0a, 0x0b, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12,
	0x3b, 0x0a, 0x07, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x21, 0x2e, 0x76, 0x31, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x52, 0x07, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x73, 0x22, 0x91, 0x01, 0x0a,
	0x0b, 0x50, 0x61, 0x67, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08,
	0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08,
	0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x70, 0x61,
	0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x1c,
	0x0a, 0x09, 0x61, 0x73, 0x63, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x09, 0x61, 0x73, 0x63, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x12, 0x0a, 0x04,
	0x74, 0x65, 0x78, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74,
	0x22, 0x4a, 0x0a, 0x0c, 0x50, 0x61, 0x67, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x3a, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x22, 0x2e, 0x76, 0x31, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x64, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x22, 0x68, 0x0a, 0x0d,
	0x50, 0x61, 0x67, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x37, 0x0a,
	0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x76,
	0x31, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52,
	0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x49,
	0x74, 0x65, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x22, 0x17, 0x0a, 0x15, 0x53, 0x74, 0x61, 0x72, 0x74, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22,
	0x18, 0x0a, 0x16, 0x53, 0x74, 0x61, 0x72, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4a, 0x6f,
	0x62, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xc3, 0x01, 0x0a, 0x11, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x41, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x22, 0x0a, 0x0c, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x69, 0x74, 0x65, 0x6d, 0x73,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x69, 0x74, 0x65, 0x6d, 0x73,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x69,
	0x74, 0x65, 0x6d, 0x73, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x69,
	0x74, 0x65, 0x6d, 0x73, 0x49, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0c, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x49, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x64, 0x12,
	0x1e, 0x0a, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x22,
	0xb6, 0x11, 0x0a, 0x12, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x76,
	0x65, 0x72, 0x76, 0x69, 0x65, 0x77, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x72, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x73, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e,
	0x64, 0x75, 0x73, 0x74, 0x72, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x6e,
	0x64, 0x75, 0x73, 0x74, 0x72, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x12, 0x2c, 0x0a, 0x11, 0x66, 0x75, 0x6c, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x45, 0x6d, 0x70, 0x6c,
	0x6f, 0x79, 0x65, 0x65, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x66, 0x75, 0x6c,
	0x6c, 0x54, 0x69, 0x6d, 0x65, 0x45, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65, 0x73, 0x12, 0x24,
	0x0a, 0x0d, 0x66, 0x69, 0x73, 0x63, 0x61, 0x6c, 0x59, 0x65, 0x61, 0x72, 0x45, 0x6e, 0x64, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x66, 0x69, 0x73, 0x63, 0x61, 0x6c, 0x59, 0x65, 0x61,
	0x72, 0x45, 0x6e, 0x64, 0x12, 0x40, 0x0a, 0x0d, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x51, 0x75,
	0x61, 0x72, 0x74, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0d, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x51,
	0x75, 0x61, 0x72, 0x74, 0x65, 0x72, 0x12, 0x32, 0x0a, 0x14, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74,
	0x43, 0x61, 0x70, 0x69, 0x74, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x14, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x43, 0x61, 0x70, 0x69,
	0x74, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x62,
	0x69, 0x74, 0x64, 0x61, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x65, 0x62, 0x69, 0x74,
	0x64, 0x61, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x65, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x07, 0x70, 0x65, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x12, 0x1a, 0x0a, 0x08,
	0x70, 0x65, 0x67, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08,
	0x70, 0x65, 0x67, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x12, 0x1c, 0x0a, 0x09, 0x62, 0x6f, 0x6f, 0x6b,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x02, 0x52, 0x09, 0x62, 0x6f, 0x6f,
	0x6b, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x64, 0x69, 0x76, 0x69, 0x64, 0x65,
	0x6e, 0x64, 0x50, 0x65, 0x72, 0x53, 0x68, 0x61, 0x72, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x10, 0x64, 0x69, 0x76, 0x69, 0x64, 0x65, 0x6e, 0x64, 0x50, 0x65, 0x72, 0x53, 0x68, 0x61,
	0x72, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x64, 0x69, 0x76, 0x69, 0x64, 0x65, 0x6e, 0x64, 0x59, 0x69,
	0x65, 0x6c, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0d, 0x64, 0x69, 0x76, 0x69, 0x64,
	0x65, 0x6e, 0x64, 0x59, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x70, 0x73, 0x18,
	0x11, 0x20, 0x01, 0x28, 0x02, 0x52, 0x03, 0x65, 0x70, 0x73, 0x12, 0x2e, 0x0a, 0x12, 0x72, 0x65,
	0x76, 0x65, 0x6e, 0x75, 0x65, 0x50, 0x65, 0x72, 0x53, 0x68, 0x61, 0x72, 0x65, 0x54, 0x74, 0x6d,
	0x18, 0x12, 0x20, 0x01, 0x28, 0x02, 0x52, 0x12, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x50,
	0x65, 0x72, 0x53, 0x68, 0x61, 0x72, 0x65, 0x54, 0x74, 0x6d, 0x12, 0x22, 0x0a, 0x0c, 0x70, 0x72,
	0x6f, 0x66, 0x69, 0x74, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x18, 0x13, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x0c, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x12, 0x2e,
	0x0a, 0x12, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x4d, 0x61, 0x72, 0x67, 0x69,
	0x6e, 0x54, 0x74, 0x6d, 0x18, 0x14, 0x20, 0x01, 0x28, 0x02, 0x52, 0x12, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6e, 0x67, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x54, 0x74, 0x6d, 0x12, 0x2c,
	0x0a, 0x11, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x4f, 0x6e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x73,
	0x54, 0x74, 0x6d, 0x18, 0x15, 0x20, 0x01, 0x28, 0x02, 0x52, 0x11, 0x72, 0x65, 0x74, 0x75, 0x72,
	0x6e, 0x4f, 0x6e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x73, 0x54, 0x74, 0x6d, 0x12, 0x26, 0x0a, 0x0e,
	0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x4f, 0x6e, 0x45, 0x71, 0x75, 0x69, 0x74, 0x79, 0x18, 0x16,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x0e, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x4f, 0x6e, 0x45, 0x71,
	0x75, 0x69, 0x74, 0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x54,
	0x74, 0x6d, 0x18, 0x17, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x75,
	0x65, 0x54, 0x74, 0x6d, 0x12, 0x26, 0x0a, 0x0e, 0x67, 0x72, 0x6f, 0x73, 0x73, 0x50, 0x72, 0x6f,
	0x66, 0x69, 0x74, 0x54, 0x74, 0x6d, 0x18, 0x18, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x67, 0x72,
	0x6f, 0x73, 0x73, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x54, 0x74, 0x6d, 0x12, 0x24, 0x0a, 0x0d,
	0x64, 0x69, 0x6c, 0x75, 0x74, 0x65, 0x64, 0x45, 0x70, 0x73, 0x54, 0x74, 0x6d, 0x18, 0x19, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x0d, 0x64, 0x69, 0x6c, 0x75, 0x74, 0x65, 0x64, 0x45, 0x70, 0x73, 0x54,
	0x74, 0x6d, 0x12, 0x3e, 0x0a, 0x1a, 0x71, 0x75, 0x61, 0x72, 0x74, 0x65, 0x72, 0x6c, 0x79, 0x45,
	0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x73, 0x47, 0x72, 0x6f, 0x77, 0x74, 0x68, 0x59, 0x6f, 0x79,
	0x18, 0x1a, 0x20, 0x01, 0x28, 0x02, 0x52, 0x1a, 0x71, 0x75, 0x61, 0x72, 0x74, 0x65, 0x72, 0x6c,
	0x79, 0x45, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x73, 0x47, 0x72, 0x6f, 0x77, 0x74, 0x68, 0x59,
	0x6f, 0x79, 0x12, 0x3c, 0x0a, 0x19, 0x71, 0x75, 0x61, 0x72, 0x74, 0x65, 0x72, 0x6c, 0x79, 0x52,
	0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x47, 0x72, 0x6f, 0x77, 0x74, 0x68, 0x59, 0x6f, 0x79, 0x18,
	0x1b, 0x20, 0x01, 0x28, 0x02, 0x52, 0x19, 0x71, 0x75, 0x61, 0x72, 0x74, 0x65, 0x72, 0x6c, 0x79,
	0x52, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x47, 0x72, 0x6f, 0x77, 0x74, 0x68, 0x59, 0x6f, 0x79,
	0x12, 0x2e, 0x0a, 0x12, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x74, 0x54, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x02, 0x52, 0x12, 0x61, 0x6e,
	0x61, 0x6c, 0x79, 0x73, 0x74, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65,
	0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x72, 0x61, 0x69, 0x6c, 0x69, 0x6e, 0x67, 0x50, 0x65, 0x18, 0x1d,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x74, 0x72, 0x61, 0x69, 0x6c, 0x69, 0x6e, 0x67, 0x50, 0x65,
	0x12, 0x1c, 0x0a, 0x09, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x50, 0x65, 0x18, 0x1e, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x09, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x50, 0x65, 0x12, 0x32,
	0x0a, 0x14, 0x70, 0x72, 0x69, 0x63, 0x65, 0x54, 0x6f, 0x53, 0x61, 0x6c, 0x65, 0x73, 0x52, 0x61,
	0x74, 0x69, 0x6f, 0x54, 0x74, 0x6d, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x02, 0x52, 0x14, 0x70, 0x72,
	0x69, 0x63, 0x65, 0x54, 0x6f, 0x53, 0x61, 0x6c, 0x65, 0x73, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x54,
	0x74, 0x6d, 0x12, 0x2a, 0x0a, 0x10, 0x70, 0x72, 0x69, 0x63, 0x65, 0x54, 0x6f, 0x42, 0x6f, 0x6f,
	0x6b, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x18, 0x20, 0x20, 0x01, 0x28, 0x02, 0x52, 0x10, 0x70, 0x72,
	0x69, 0x63, 0x65, 0x54, 0x6f, 0x42, 0x6f, 0x6f, 0x6b, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x12, 0x20,
	0x0a, 0x0b, 0x65, 0x76, 0x54, 0x6f, 0x52, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x18, 0x21, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x0b, 0x65, 0x76, 0x54, 0x6f, 0x52, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65,
	0x12, 0x1e, 0x0a, 0x0a, 0x65, 0x76, 0x54, 0x6f, 0x45, 0x62, 0x69, 0x74, 0x64, 0x61, 0x18, 0x22,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x65, 0x76, 0x54, 0x6f, 0x45, 0x62, 0x69, 0x74, 0x64, 0x61,
	0x12, 0x12, 0x0a, 0x04, 0x62, 0x65, 0x74, 0x61, 0x18, 0x23, 0x20, 0x01, 0x28, 0x02, 0x52, 0x04,
	0x62, 0x65, 0x74, 0x61, 0x12, 0x1e, 0x0a, 0x0a, 0x77, 0x65, 0x65, 0x6b, 0x48, 0x69, 0x67, 0x68,
	0x35, 0x32, 0x18, 0x24, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x77, 0x65, 0x65, 0x6b, 0x48, 0x69,
	0x67, 0x68, 0x35, 0x32, 0x12, 0x1c, 0x0a, 0x09, 0x77, 0x65, 0x65, 0x6b, 0x4c, 0x6f, 0x77, 0x35,
	0x32, 0x18, 0x25, 0x20, 0x01, 0x28, 0x02, 0x52, 0x09, 0x77, 0x65, 0x65, 0x6b, 0x4c, 0x6f, 0x77,
	0x35, 0x32, 0x12, 0x2c, 0x0a, 0x11, 0x73, 0x68, 0x61, 0x72, 0x65, 0x73, 0x4f, 0x75, 0x74, 0x73,
	0x74, 0x61, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x26, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x73,
	0x68, 0x61, 0x72, 0x65, 0x73, 0x4f, 0x75, 0x74, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x69, 0x6e, 0x67,
	0x12, 0x20, 0x0a, 0x0b, 0x73, 0x68, 0x61, 0x72, 0x65, 0x73, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x18,
	0x27, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x73, 0x68, 0x61, 0x72, 0x65, 0x73, 0x46, 0x6c, 0x6f,
	0x61, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x68, 0x61, 0x72, 0x65, 0x73, 0x53, 0x68, 0x6f, 0x72,
	0x74, 0x18, 0x28, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x73, 0x68, 0x61, 0x72, 0x65, 0x73, 0x53,
	0x68, 0x6f, 0x72, 0x74, 0x12, 0x34, 0x0a, 0x15, 0x73, 0x68, 0x61, 0x72, 0x65, 0x73, 0x53, 0x68,
	0x6f, 0x72, 0x74, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x18, 0x29, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x15, 0x73, 0x68, 0x61, 0x72, 0x65, 0x73, 0x53, 0x68, 0x6f, 0x72, 0x74,
	0x50, 0x72, 0x69, 0x6f, 0x72, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x68,
	0x6f, 0x72, 0x74, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0a,
	0x73, 0x68, 0x6f, 0x72, 0x74, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x12, 0x38, 0x0a, 0x17, 0x73, 0x68,
	0x6f, 0x72, 0x74, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x4f, 0x75, 0x74, 0x73, 0x74, 0x61,
	0x6e, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x02, 0x52, 0x17, 0x73, 0x68, 0x6f,
	0x72, 0x74, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x4f, 0x75, 0x74, 0x73, 0x74, 0x61, 0x6e,
	0x64, 0x69, 0x6e, 0x67, 0x12, 0x2c, 0x0a, 0x11, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x50, 0x65, 0x72,
	0x63, 0x65, 0x6e, 0x74, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x11, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x46, 0x6c, 0x6f,
	0x61, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x73,
	0x69, 0x64, 0x65, 0x72, 0x73, 0x18, 0x2d, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0f, 0x70, 0x65, 0x72,
	0x63, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x73, 0x69, 0x64, 0x65, 0x72, 0x73, 0x12, 0x30, 0x0a, 0x13,
	0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x69, 0x74, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x2e, 0x20, 0x01, 0x28, 0x02, 0x52, 0x13, 0x70, 0x65, 0x72, 0x63, 0x65,
	0x6e, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x69, 0x74, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x3c,
	0x0a, 0x19, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x41, 0x6e, 0x6e, 0x75, 0x61, 0x6c, 0x44,
	0x69, 0x76, 0x69, 0x64, 0x65, 0x6e, 0x64, 0x52, 0x61, 0x74, 0x65, 0x18, 0x2f, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x19, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x41, 0x6e, 0x6e, 0x75, 0x61, 0x6c,
	0x44, 0x69, 0x76, 0x69, 0x64, 0x65, 0x6e, 0x64, 0x52, 0x61, 0x74, 0x65, 0x12, 0x3e, 0x0a, 0x1a,
	0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x41, 0x6e, 0x6e, 0x75, 0x61, 0x6c, 0x44, 0x69, 0x76,
	0x69, 0x64, 0x65, 0x6e, 0x64, 0x59, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x30, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x1a, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x41, 0x6e, 0x6e, 0x75, 0x61, 0x6c, 0x44,
	0x69, 0x76, 0x69, 0x64, 0x65, 0x6e, 0x64, 0x59, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x20, 0x0a, 0x0b,
	0x70, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x18, 0x31, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x0b, 0x70, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x12, 0x3e,
	0x0a, 0x0c, 0x64, 0x69, 0x76, 0x69, 0x64, 0x65, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x18, 0x32,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x0c, 0x64, 0x69, 0x76, 0x69, 0x64, 0x65, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x12, 0x42,
	0x0a, 0x0e, 0x65, 0x78, 0x44, 0x69, 0x76, 0x69, 0x64, 0x65, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65,
	0x18, 0x33, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x0e, 0x65, 0x78, 0x44, 0x69, 0x76, 0x69, 0x64, 0x65, 0x6e, 0x64, 0x44, 0x61,
	0x74, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x6c, 0x61, 0x73, 0x74, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x46,
	0x61, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x34, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6c, 0x61, 0x73,
	0x74, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x40, 0x0a, 0x0d,
	0x6c, 0x61, 0x73, 0x74, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x44, 0x61, 0x74, 0x65, 0x18, 0x35, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x0d, 0x6c, 0x61, 0x73, 0x74, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x38,
	0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x36, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0x27, 0x0a, 0x11, 0x49, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a,
	0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x75, 0x69,
	0x64, 0x22, 0x94, 0x01, 0x0a, 0x0e, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x38, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x44, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61,
	0x74, 0x65, 0x12, 0x34, 0x0a, 0x07, 0x65, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x07, 0x65, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x22, 0x47, 0x0a, 0x0f, 0x48, 0x69, 0x73, 0x74,
	0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x34, 0x0a, 0x05, 0x69,
	0x74, 0x65, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x76, 0x31, 0x2e,
	0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d,
	0x73, 0x22, 0x92, 0x01, 0x0a, 0x0c, 0x43, 0x68, 0x61, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x38, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x44,
	0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65,
	0x12, 0x34, 0x0a, 0x07, 0x65, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x65,
	0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x22, 0x64, 0x0a, 0x0d, 0x43, 0x68, 0x61, 0x72, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x64, 0x61, 0x74, 0x65, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x64, 0x61, 0x74, 0x65, 0x73, 0x12, 0x3d, 0x0a,
	0x09, 0x63, 0x68, 0x61, 0x72, 0x74, 0x44, 0x61, 0x79, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1f, 0x2e, 0x76, 0x31, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x74, 0x44, 0x61,
	0x79, 0x52, 0x09, 0x63, 0x68, 0x61, 0x72, 0x74, 0x44, 0x61, 0x79, 0x73, 0x22, 0x22, 0x0a, 0x08,
	0x43, 0x68, 0x61, 0x72, 0x74, 0x44, 0x61, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x01, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73,
	0x22, 0x19, 0x0a, 0x17, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x1a, 0x0a, 0x18, 0x48,
	0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4a, 0x6f, 0x62, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xc7, 0x01, 0x0a, 0x07, 0x48, 0x69, 0x73, 0x74,
	0x6f, 0x72, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x6f, 0x70, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x04, 0x6f, 0x70, 0x65, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6c, 0x6f, 0x73, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x68, 0x69, 0x67, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x68, 0x69, 0x67,
	0x68, 0x12, 0x10, 0x0a, 0x03, 0x6c, 0x6f, 0x77, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03,
	0x6c, 0x6f, 0x77, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x38, 0x0a, 0x09, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x64, 0x6a, 0x43, 0x6c, 0x6f, 0x73,
	0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x61, 0x64, 0x6a, 0x43, 0x6c, 0x6f, 0x73,
	0x65, 0x22, 0xd7, 0x01, 0x0a, 0x10, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x48, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x34, 0x2e, 0x76, 0x31, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x49, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x72, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x39, 0x0a, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x21, 0x2e, 0x76, 0x31, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x52, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x22, 0x3e, 0x0a, 0x0c, 0x72,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0a, 0x0a, 0x06, 0x43,
	0x52, 0x45, 0x41, 0x54, 0x45, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x55, 0x50, 0x44, 0x41, 0x54,
	0x45, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x10, 0x02, 0x12,
	0x0a, 0x0a, 0x06, 0x49, 0x47, 0x4e, 0x4f, 0x52, 0x45, 0x10, 0x03, 0x32, 0xbd, 0x07, 0x0a, 0x11,
	0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x12, 0x77, 0x0a, 0x08, 0x47, 0x65, 0x74, 0x50, 0x61, 0x67, 0x65, 0x64, 0x12, 0x23, 0x2e,
	0x76, 0x31, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x24, 0x2e, 0x76, 0x31, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x64,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x20, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1a,
	0x22, 0x15, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c,
	0x73, 0x2f, 0x70, 0x61, 0x67, 0x65, 0x64, 0x3a, 0x01, 0x2a, 0x12, 0x8c, 0x01, 0x0a, 0x08, 0x4f,
	0x76, 0x65, 0x72, 0x76, 0x69, 0x65, 0x77, 0x12, 0x28, 0x2e, 0x76, 0x31, 0x2e, 0x69, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x29, 0x2e, 0x76, 0x31, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x76, 0x65, 0x72, 0x76, 0x69, 0x65, 0x77, 0x22, 0x2b, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x25, 0x12, 0x23, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x69, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x7b, 0x75, 0x75, 0x69, 0x64, 0x7d,
	0x2f, 0x6f, 0x76, 0x65, 0x72, 0x76, 0x69, 0x65, 0x77, 0x12, 0x76, 0x0a, 0x03, 0x47, 0x65, 0x74,
	0x12, 0x28, 0x2e, 0x76, 0x31, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x76, 0x31, 0x2e,
	0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x22, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x1c, 0x12, 0x1a, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x69,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x7b, 0x75, 0x75, 0x69, 0x64,
	0x7d, 0x12, 0x8a, 0x01, 0x0a, 0x09, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x6c, 0x6c, 0x12,
	0x2c, 0x2e, 0x76, 0x31, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e,
	0x76, 0x31, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x6c, 0x6c, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x25, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1f, 0x22,
	0x1d, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x2f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x6c, 0x6c, 0x12, 0x84,
	0x01, 0x0a, 0x07, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x25, 0x2e, 0x76, 0x31, 0x2e,
	0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x26, 0x2e, 0x76, 0x31, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72,
	0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2a, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x24, 0x22, 0x22, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x69, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x7b, 0x75, 0x75, 0x69, 0x64, 0x7d, 0x2f, 0x68, 0x69,
	0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x7c, 0x0a, 0x05, 0x43, 0x68, 0x61, 0x72, 0x74, 0x12, 0x23,
	0x2e, 0x76, 0x31, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x76, 0x31, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x68, 0x61, 0x72,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x28, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x22, 0x22, 0x20, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x69, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x7b, 0x75, 0x75, 0x69, 0x64, 0x7d, 0x2f, 0x63, 0x68,
	0x61, 0x72, 0x74, 0x12, 0x95, 0x01, 0x0a, 0x0c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x6c,
	0x6c, 0x4a, 0x6f, 0x62, 0x12, 0x2c, 0x2e, 0x76, 0x31, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x74, 0x61,
	0x72, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x76, 0x31, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x72, 0x74,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x28, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x22, 0x22, 0x20, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x76, 0x31, 0x2f, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x6c, 0x6c, 0x4a, 0x6f, 0x62, 0x42, 0xb8, 0x02, 0x5a, 0x3f,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x76, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x6d, 0x61, 0x6e, 0x31, 0x2f, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x2d, 0x61,
	0x70, 0x69, 0x2f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x2f, 0x69, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x92,
	0x41, 0xf3, 0x01, 0x12, 0x5f, 0x0a, 0x12, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x20, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x22, 0x44, 0x0a, 0x10, 0x44, 0x79, 0x73,
	0x74, 0x6f, 0x70, 0x69, 0x61, 0x20, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x18, 0x68,
	0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x64, 0x79, 0x73, 0x74, 0x6f, 0x70, 0x69, 0x61, 0x2e,
	0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x73, 0x1a, 0x16, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x40, 0x64,
	0x79, 0x73, 0x74, 0x6f, 0x70, 0x69, 0x61, 0x2e, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x73, 0x32,
	0x03, 0x31, 0x2e, 0x30, 0x2a, 0x01, 0x02, 0x32, 0x10, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x10, 0x61, 0x70, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6a, 0x73, 0x6f, 0x6e, 0x52, 0x69, 0x0a, 0x03, 0x34,
	0x30, 0x31, 0x12, 0x62, 0x0a, 0x58, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x20, 0x77,
	0x68, 0x65, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x20,
	0x64, 0x69, 0x64, 0x6e, 0x27, 0x74, 0x20, 0x6f, 0x72, 0x20, 0x70, 0x61, 0x73, 0x73, 0x65, 0x64,
	0x20, 0x61, 0x6e, 0x20, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x20, 0x75, 0x73, 0x65, 0x72,
	0x20, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x20, 0x69, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x20, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x2e, 0x12, 0x06,
	0x0a, 0x04, 0x9a, 0x02, 0x01, 0x07, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_instrument_service_proto_rawDescOnce sync.Once
	file_instrument_service_proto_rawDescData = file_instrument_service_proto_rawDesc
)

func file_instrument_service_proto_rawDescGZIP() []byte {
	file_instrument_service_proto_rawDescOnce.Do(func() {
		file_instrument_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_instrument_service_proto_rawDescData)
	})
	return file_instrument_service_proto_rawDescData
}

var file_instrument_service_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_instrument_service_proto_msgTypes = make([]protoimpl.MessageInfo, 19)
var file_instrument_service_proto_goTypes = []interface{}{
	(InstrumentStatusResponseType)(0), // 0: v1.instrument_service.InstrumentStatus.responseType
	(*Instrument)(nil),                // 1: v1.instrument_service.Instrument
	(*Instruments)(nil),               // 2: v1.instrument_service.Instruments
	(*PagedFilter)(nil),               // 3: v1.instrument_service.PagedFilter
	(*PagedRequest)(nil),              // 4: v1.instrument_service.PagedRequest
	(*PagedResponse)(nil),             // 5: v1.instrument_service.PagedResponse
	(*StartUpdateJobRequest)(nil),     // 6: v1.instrument_service.StartUpdateJobRequest
	(*StartUpdateJobResponse)(nil),    // 7: v1.instrument_service.StartUpdateJobResponse
	(*UpdateAllResponse)(nil),         // 8: v1.instrument_service.UpdateAllResponse
	(*InstrumentOverview)(nil),        // 9: v1.instrument_service.InstrumentOverview
	(*InstrumentRequest)(nil),         // 10: v1.instrument_service.InstrumentRequest
	(*HistoryRequest)(nil),            // 11: v1.instrument_service.HistoryRequest
	(*HistoryResponse)(nil),           // 12: v1.instrument_service.HistoryResponse
	(*ChartRequest)(nil),              // 13: v1.instrument_service.ChartRequest
	(*ChartResponse)(nil),             // 14: v1.instrument_service.ChartResponse
	(*ChartDay)(nil),                  // 15: v1.instrument_service.ChartDay
	(*HistoryUpdateJobRequest)(nil),   // 16: v1.instrument_service.HistoryUpdateJobRequest
	(*HistoryUpdateJobResponse)(nil),  // 17: v1.instrument_service.HistoryUpdateJobResponse
	(*History)(nil),                   // 18: v1.instrument_service.History
	(*InstrumentStatus)(nil),          // 19: v1.instrument_service.InstrumentStatus
	(*timestamppb.Timestamp)(nil),     // 20: google.protobuf.Timestamp
}
var file_instrument_service_proto_depIdxs = []int32{
	20, // 0: v1.instrument_service.Instrument.created_at:type_name -> google.protobuf.Timestamp
	20, // 1: v1.instrument_service.Instrument.updated_at:type_name -> google.protobuf.Timestamp
	20, // 2: v1.instrument_service.Instrument.deleted_at:type_name -> google.protobuf.Timestamp
	1,  // 3: v1.instrument_service.Instruments.symbols:type_name -> v1.instrument_service.Instrument
	3,  // 4: v1.instrument_service.PagedRequest.filter:type_name -> v1.instrument_service.PagedFilter
	1,  // 5: v1.instrument_service.PagedResponse.items:type_name -> v1.instrument_service.Instrument
	20, // 6: v1.instrument_service.InstrumentOverview.latestQuarter:type_name -> google.protobuf.Timestamp
	20, // 7: v1.instrument_service.InstrumentOverview.dividendDate:type_name -> google.protobuf.Timestamp
	20, // 8: v1.instrument_service.InstrumentOverview.exDividendDate:type_name -> google.protobuf.Timestamp
	20, // 9: v1.instrument_service.InstrumentOverview.lastSplitDate:type_name -> google.protobuf.Timestamp
	20, // 10: v1.instrument_service.InstrumentOverview.updatedAt:type_name -> google.protobuf.Timestamp
	20, // 11: v1.instrument_service.HistoryRequest.startDate:type_name -> google.protobuf.Timestamp
	20, // 12: v1.instrument_service.HistoryRequest.endDate:type_name -> google.protobuf.Timestamp
	18, // 13: v1.instrument_service.HistoryResponse.items:type_name -> v1.instrument_service.History
	20, // 14: v1.instrument_service.ChartRequest.startDate:type_name -> google.protobuf.Timestamp
	20, // 15: v1.instrument_service.ChartRequest.endDate:type_name -> google.protobuf.Timestamp
	15, // 16: v1.instrument_service.ChartResponse.chartDays:type_name -> v1.instrument_service.ChartDay
	20, // 17: v1.instrument_service.History.timestamp:type_name -> google.protobuf.Timestamp
	0,  // 18: v1.instrument_service.InstrumentStatus.type:type_name -> v1.instrument_service.InstrumentStatus.responseType
	1,  // 19: v1.instrument_service.InstrumentStatus.symbol:type_name -> v1.instrument_service.Instrument
	4,  // 20: v1.instrument_service.InstrumentService.GetPaged:input_type -> v1.instrument_service.PagedRequest
	10, // 21: v1.instrument_service.InstrumentService.Overview:input_type -> v1.instrument_service.InstrumentRequest
	10, // 22: v1.instrument_service.InstrumentService.Get:input_type -> v1.instrument_service.InstrumentRequest
	6,  // 23: v1.instrument_service.InstrumentService.UpdateAll:input_type -> v1.instrument_service.StartUpdateJobRequest
	11, // 24: v1.instrument_service.InstrumentService.History:input_type -> v1.instrument_service.HistoryRequest
	13, // 25: v1.instrument_service.InstrumentService.Chart:input_type -> v1.instrument_service.ChartRequest
	6,  // 26: v1.instrument_service.InstrumentService.UpdateAllJob:input_type -> v1.instrument_service.StartUpdateJobRequest
	5,  // 27: v1.instrument_service.InstrumentService.GetPaged:output_type -> v1.instrument_service.PagedResponse
	9,  // 28: v1.instrument_service.InstrumentService.Overview:output_type -> v1.instrument_service.InstrumentOverview
	1,  // 29: v1.instrument_service.InstrumentService.Get:output_type -> v1.instrument_service.Instrument
	8,  // 30: v1.instrument_service.InstrumentService.UpdateAll:output_type -> v1.instrument_service.UpdateAllResponse
	12, // 31: v1.instrument_service.InstrumentService.History:output_type -> v1.instrument_service.HistoryResponse
	14, // 32: v1.instrument_service.InstrumentService.Chart:output_type -> v1.instrument_service.ChartResponse
	7,  // 33: v1.instrument_service.InstrumentService.UpdateAllJob:output_type -> v1.instrument_service.StartUpdateJobResponse
	27, // [27:34] is the sub-list for method output_type
	20, // [20:27] is the sub-list for method input_type
	20, // [20:20] is the sub-list for extension type_name
	20, // [20:20] is the sub-list for extension extendee
	0,  // [0:20] is the sub-list for field type_name
}

func init() { file_instrument_service_proto_init() }
func file_instrument_service_proto_init() {
	if File_instrument_service_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_instrument_service_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Instrument); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_instrument_service_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Instruments); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_instrument_service_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PagedFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_instrument_service_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PagedRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_instrument_service_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PagedResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_instrument_service_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StartUpdateJobRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_instrument_service_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StartUpdateJobResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_instrument_service_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateAllResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_instrument_service_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InstrumentOverview); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_instrument_service_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InstrumentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_instrument_service_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HistoryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_instrument_service_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HistoryResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_instrument_service_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChartRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_instrument_service_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChartResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_instrument_service_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChartDay); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_instrument_service_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HistoryUpdateJobRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_instrument_service_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HistoryUpdateJobResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_instrument_service_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*History); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_instrument_service_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InstrumentStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_instrument_service_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   19,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_instrument_service_proto_goTypes,
		DependencyIndexes: file_instrument_service_proto_depIdxs,
		EnumInfos:         file_instrument_service_proto_enumTypes,
		MessageInfos:      file_instrument_service_proto_msgTypes,
	}.Build()
	File_instrument_service_proto = out.File
	file_instrument_service_proto_rawDesc = nil
	file_instrument_service_proto_goTypes = nil
	file_instrument_service_proto_depIdxs = nil
}
