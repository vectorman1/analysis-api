// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package symbol_service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// SymbolServiceClient is the client API for SymbolService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SymbolServiceClient interface {
	ReadPaged(ctx context.Context, in *ReadPagedSymbolRequest, opts ...grpc.CallOption) (*ReadPagedSymbolResponse, error)
	Read(ctx context.Context, in *ReadSymbolRequest, opts ...grpc.CallOption) (*ReadSymbolResponse, error)
	Create(ctx context.Context, in *CreateSymbolRequest, opts ...grpc.CallOption) (*CreateSymbolResponse, error)
	Update(ctx context.Context, in *UpdateSymbolRequest, opts ...grpc.CallOption) (*UpdateSymbolResponse, error)
	Delete(ctx context.Context, in *DeleteSymbolRequest, opts ...grpc.CallOption) (*DeleteSymbolResponse, error)
	Populate(ctx context.Context, in *PopulateSymbolRequest, opts ...grpc.CallOption) (*PopulateSymbolResponse, error)
	Recalculate(ctx context.Context, in *RecalculateSymbolRequest, opts ...grpc.CallOption) (*RecalculateSymbolResponse, error)
}

type symbolServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSymbolServiceClient(cc grpc.ClientConnInterface) SymbolServiceClient {
	return &symbolServiceClient{cc}
}

func (c *symbolServiceClient) ReadPaged(ctx context.Context, in *ReadPagedSymbolRequest, opts ...grpc.CallOption) (*ReadPagedSymbolResponse, error) {
	out := new(ReadPagedSymbolResponse)
	err := c.cc.Invoke(ctx, "/v1.symbol_service.SymbolService/ReadPaged", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *symbolServiceClient) Read(ctx context.Context, in *ReadSymbolRequest, opts ...grpc.CallOption) (*ReadSymbolResponse, error) {
	out := new(ReadSymbolResponse)
	err := c.cc.Invoke(ctx, "/v1.symbol_service.SymbolService/Read", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *symbolServiceClient) Create(ctx context.Context, in *CreateSymbolRequest, opts ...grpc.CallOption) (*CreateSymbolResponse, error) {
	out := new(CreateSymbolResponse)
	err := c.cc.Invoke(ctx, "/v1.symbol_service.SymbolService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *symbolServiceClient) Update(ctx context.Context, in *UpdateSymbolRequest, opts ...grpc.CallOption) (*UpdateSymbolResponse, error) {
	out := new(UpdateSymbolResponse)
	err := c.cc.Invoke(ctx, "/v1.symbol_service.SymbolService/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *symbolServiceClient) Delete(ctx context.Context, in *DeleteSymbolRequest, opts ...grpc.CallOption) (*DeleteSymbolResponse, error) {
	out := new(DeleteSymbolResponse)
	err := c.cc.Invoke(ctx, "/v1.symbol_service.SymbolService/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *symbolServiceClient) Populate(ctx context.Context, in *PopulateSymbolRequest, opts ...grpc.CallOption) (*PopulateSymbolResponse, error) {
	out := new(PopulateSymbolResponse)
	err := c.cc.Invoke(ctx, "/v1.symbol_service.SymbolService/Populate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *symbolServiceClient) Recalculate(ctx context.Context, in *RecalculateSymbolRequest, opts ...grpc.CallOption) (*RecalculateSymbolResponse, error) {
	out := new(RecalculateSymbolResponse)
	err := c.cc.Invoke(ctx, "/v1.symbol_service.SymbolService/Recalculate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SymbolServiceServer is the server API for SymbolService service.
// All implementations must embed UnimplementedSymbolServiceServer
// for forward compatibility
type SymbolServiceServer interface {
	ReadPaged(context.Context, *ReadPagedSymbolRequest) (*ReadPagedSymbolResponse, error)
	Read(context.Context, *ReadSymbolRequest) (*ReadSymbolResponse, error)
	Create(context.Context, *CreateSymbolRequest) (*CreateSymbolResponse, error)
	Update(context.Context, *UpdateSymbolRequest) (*UpdateSymbolResponse, error)
	Delete(context.Context, *DeleteSymbolRequest) (*DeleteSymbolResponse, error)
	Populate(context.Context, *PopulateSymbolRequest) (*PopulateSymbolResponse, error)
	Recalculate(context.Context, *RecalculateSymbolRequest) (*RecalculateSymbolResponse, error)
	mustEmbedUnimplementedSymbolServiceServer()
}

// UnimplementedSymbolServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSymbolServiceServer struct {
}

func (UnimplementedSymbolServiceServer) ReadPaged(context.Context, *ReadPagedSymbolRequest) (*ReadPagedSymbolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadPaged not implemented")
}
func (UnimplementedSymbolServiceServer) Read(context.Context, *ReadSymbolRequest) (*ReadSymbolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Read not implemented")
}
func (UnimplementedSymbolServiceServer) Create(context.Context, *CreateSymbolRequest) (*CreateSymbolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedSymbolServiceServer) Update(context.Context, *UpdateSymbolRequest) (*UpdateSymbolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedSymbolServiceServer) Delete(context.Context, *DeleteSymbolRequest) (*DeleteSymbolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedSymbolServiceServer) Populate(context.Context, *PopulateSymbolRequest) (*PopulateSymbolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Populate not implemented")
}
func (UnimplementedSymbolServiceServer) Recalculate(context.Context, *RecalculateSymbolRequest) (*RecalculateSymbolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Recalculate not implemented")
}
func (UnimplementedSymbolServiceServer) mustEmbedUnimplementedSymbolServiceServer() {}

// UnsafeSymbolServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SymbolServiceServer will
// result in compilation errors.
type UnsafeSymbolServiceServer interface {
	mustEmbedUnimplementedSymbolServiceServer()
}

func RegisterSymbolServiceServer(s *grpc.Server, srv SymbolServiceServer) {
	s.RegisterService(&_SymbolService_serviceDesc, srv)
}

func _SymbolService_ReadPaged_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadPagedSymbolRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SymbolServiceServer).ReadPaged(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.symbol_service.SymbolService/ReadPaged",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SymbolServiceServer).ReadPaged(ctx, req.(*ReadPagedSymbolRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SymbolService_Read_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadSymbolRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SymbolServiceServer).Read(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.symbol_service.SymbolService/Read",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SymbolServiceServer).Read(ctx, req.(*ReadSymbolRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SymbolService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSymbolRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SymbolServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.symbol_service.SymbolService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SymbolServiceServer).Create(ctx, req.(*CreateSymbolRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SymbolService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSymbolRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SymbolServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.symbol_service.SymbolService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SymbolServiceServer).Update(ctx, req.(*UpdateSymbolRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SymbolService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSymbolRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SymbolServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.symbol_service.SymbolService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SymbolServiceServer).Delete(ctx, req.(*DeleteSymbolRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SymbolService_Populate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PopulateSymbolRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SymbolServiceServer).Populate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.symbol_service.SymbolService/Populate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SymbolServiceServer).Populate(ctx, req.(*PopulateSymbolRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SymbolService_Recalculate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecalculateSymbolRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SymbolServiceServer).Recalculate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.symbol_service.SymbolService/Recalculate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SymbolServiceServer).Recalculate(ctx, req.(*RecalculateSymbolRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _SymbolService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "v1.symbol_service.SymbolService",
	HandlerType: (*SymbolServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ReadPaged",
			Handler:    _SymbolService_ReadPaged_Handler,
		},
		{
			MethodName: "Read",
			Handler:    _SymbolService_Read_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _SymbolService_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _SymbolService_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _SymbolService_Delete_Handler,
		},
		{
			MethodName: "Populate",
			Handler:    _SymbolService_Populate_Handler,
		},
		{
			MethodName: "Recalculate",
			Handler:    _SymbolService_Recalculate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "symbol_service.proto",
}
