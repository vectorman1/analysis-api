// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package symbol_service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// SymbolServiceClient is the client API for SymbolService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SymbolServiceClient interface {
	ReadPaged(ctx context.Context, in *ReadPagedRequest, opts ...grpc.CallOption) (*ReadPagedResponse, error)
	Details(ctx context.Context, in *SymbolDetailsRequest, opts ...grpc.CallOption) (*SymbolDetailsResponse, error)
	StartUpdateJob(ctx context.Context, in *StartUpdateJobRequest, opts ...grpc.CallOption) (*StartUpdateJobResponse, error)
}

type symbolServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSymbolServiceClient(cc grpc.ClientConnInterface) SymbolServiceClient {
	return &symbolServiceClient{cc}
}

func (c *symbolServiceClient) ReadPaged(ctx context.Context, in *ReadPagedRequest, opts ...grpc.CallOption) (*ReadPagedResponse, error) {
	out := new(ReadPagedResponse)
	err := c.cc.Invoke(ctx, "/v1.symbol_service.SymbolService/ReadPaged", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *symbolServiceClient) Details(ctx context.Context, in *SymbolDetailsRequest, opts ...grpc.CallOption) (*SymbolDetailsResponse, error) {
	out := new(SymbolDetailsResponse)
	err := c.cc.Invoke(ctx, "/v1.symbol_service.SymbolService/Details", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *symbolServiceClient) StartUpdateJob(ctx context.Context, in *StartUpdateJobRequest, opts ...grpc.CallOption) (*StartUpdateJobResponse, error) {
	out := new(StartUpdateJobResponse)
	err := c.cc.Invoke(ctx, "/v1.symbol_service.SymbolService/StartUpdateJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SymbolServiceServer is the server API for SymbolService service.
// All implementations must embed UnimplementedSymbolServiceServer
// for forward compatibility
type SymbolServiceServer interface {
	ReadPaged(context.Context, *ReadPagedRequest) (*ReadPagedResponse, error)
	Details(context.Context, *SymbolDetailsRequest) (*SymbolDetailsResponse, error)
	StartUpdateJob(context.Context, *StartUpdateJobRequest) (*StartUpdateJobResponse, error)
	mustEmbedUnimplementedSymbolServiceServer()
}

// UnimplementedSymbolServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSymbolServiceServer struct {
}

func (UnimplementedSymbolServiceServer) ReadPaged(context.Context, *ReadPagedRequest) (*ReadPagedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadPaged not implemented")
}
func (UnimplementedSymbolServiceServer) Details(context.Context, *SymbolDetailsRequest) (*SymbolDetailsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Details not implemented")
}
func (UnimplementedSymbolServiceServer) StartUpdateJob(context.Context, *StartUpdateJobRequest) (*StartUpdateJobResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartUpdateJob not implemented")
}
func (UnimplementedSymbolServiceServer) mustEmbedUnimplementedSymbolServiceServer() {}

// UnsafeSymbolServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SymbolServiceServer will
// result in compilation errors.
type UnsafeSymbolServiceServer interface {
	mustEmbedUnimplementedSymbolServiceServer()
}

func RegisterSymbolServiceServer(s *grpc.Server, srv SymbolServiceServer) {
	s.RegisterService(&_SymbolService_serviceDesc, srv)
}

func _SymbolService_ReadPaged_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadPagedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SymbolServiceServer).ReadPaged(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.symbol_service.SymbolService/ReadPaged",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SymbolServiceServer).ReadPaged(ctx, req.(*ReadPagedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SymbolService_Details_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SymbolDetailsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SymbolServiceServer).Details(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.symbol_service.SymbolService/Details",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SymbolServiceServer).Details(ctx, req.(*SymbolDetailsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SymbolService_StartUpdateJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartUpdateJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SymbolServiceServer).StartUpdateJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.symbol_service.SymbolService/StartUpdateJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SymbolServiceServer).StartUpdateJob(ctx, req.(*StartUpdateJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _SymbolService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "v1.symbol_service.SymbolService",
	HandlerType: (*SymbolServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ReadPaged",
			Handler:    _SymbolService_ReadPaged_Handler,
		},
		{
			MethodName: "Details",
			Handler:    _SymbolService_Details_Handler,
		},
		{
			MethodName: "StartUpdateJob",
			Handler:    _SymbolService_StartUpdateJob_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "symbol_service.proto",
}
