// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package historical_service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// HistoricalServiceClient is the client API for HistoricalService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HistoricalServiceClient interface {
	GetBySymbolUuid(ctx context.Context, in *GetBySymbolUuidRequest, opts ...grpc.CallOption) (*GetBySymbolUuidResponse, error)
}

type historicalServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewHistoricalServiceClient(cc grpc.ClientConnInterface) HistoricalServiceClient {
	return &historicalServiceClient{cc}
}

func (c *historicalServiceClient) GetBySymbolUuid(ctx context.Context, in *GetBySymbolUuidRequest, opts ...grpc.CallOption) (*GetBySymbolUuidResponse, error) {
	out := new(GetBySymbolUuidResponse)
	err := c.cc.Invoke(ctx, "/v1.historical_service.HistoricalService/GetBySymbolUuid", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HistoricalServiceServer is the server API for HistoricalService service.
// All implementations must embed UnimplementedHistoricalServiceServer
// for forward compatibility
type HistoricalServiceServer interface {
	GetBySymbolUuid(context.Context, *GetBySymbolUuidRequest) (*GetBySymbolUuidResponse, error)
	mustEmbedUnimplementedHistoricalServiceServer()
}

// UnimplementedHistoricalServiceServer must be embedded to have forward compatible implementations.
type UnimplementedHistoricalServiceServer struct {
}

func (UnimplementedHistoricalServiceServer) GetBySymbolUuid(context.Context, *GetBySymbolUuidRequest) (*GetBySymbolUuidResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBySymbolUuid not implemented")
}
func (UnimplementedHistoricalServiceServer) mustEmbedUnimplementedHistoricalServiceServer() {}

// UnsafeHistoricalServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HistoricalServiceServer will
// result in compilation errors.
type UnsafeHistoricalServiceServer interface {
	mustEmbedUnimplementedHistoricalServiceServer()
}

func RegisterHistoricalServiceServer(s *grpc.Server, srv HistoricalServiceServer) {
	s.RegisterService(&_HistoricalService_serviceDesc, srv)
}

func _HistoricalService_GetBySymbolUuid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBySymbolUuidRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HistoricalServiceServer).GetBySymbolUuid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.historical_service.HistoricalService/GetBySymbolUuid",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HistoricalServiceServer).GetBySymbolUuid(ctx, req.(*GetBySymbolUuidRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _HistoricalService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "v1.historical_service.HistoricalService",
	HandlerType: (*HistoricalServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetBySymbolUuid",
			Handler:    _HistoricalService_GetBySymbolUuid_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "historical_service.proto",
}
